# generated from rosidl_generator_py/resource/_msg.py.template
# generated code does not contain a copyright notice

converter = None
type_support = None

@[for typesupport_impl in typesupport_impls.split(';')]@
if converter is None or type_support is None:
try:
    from @(spec.base_type.pkg_name).@(subfolder)._@(module_name)_support__@(typesupport_impl) import converter
    from @(spec.base_type.pkg_name).@(subfolder)._@(module_name)_support__@(typesupport_impl) import type_support
except ImportError:
    pass
@[end for]@

if converter is None or type_support is None:
    raise RuntimeError('Cannot find type support extension')


class @(spec.base_type.type)__Metadata(type):

    _CONVERTER = converter

    _TYPE_SUPPORT = type_support

@[for constant in spec.constants]@

    @@property
    def @(constant.name)(cls):
        """Message constant '@(constant.name)'"""
        return @constant_value_to_py(constant.type, constant.value)
@[end for]@
@[for field in spec.fields]@
@[if field.default_value]@

    @@property
    def @(field.name.upper())__DEFAULT(cls):
        """Default value for message field '@(field.name)'"""
        return @value_to_py(field.type, field.default_value, array_as_tuple=True)
@[end if]@
@[end for]@

    def __setattr__(cls, name, value):
        raise AttributeError("Class variables are read-only")

    @@classmethod
    def __prepare__(cls, name, bases, **kwargs):
        return {
@[for constant in spec.constants]@
            '@(constant.name)': @constant_value_to_py(constant.type, constant.value),
@[end for]@
@[for field in spec.fields]@
@[if field.default_value]@
            '@(field.name.upper())__DEFAULT': @value_to_py(field.type, field.default_value,
                                                           array_as_tuple=True),
@[end if]@
@[end for]@
        }


class @(spec.base_type.type)(metaclass=@(spec.base_type.type)__Metadata):

    __slots__ = [
@[for field in spec.fields]@
        '_@(field.name)',
@[end for]@
    ]

@[if len(spec.fields) > 0]@
    def __init__(self, **kwargs):
        assert(all(['_' + key in self.__slots__ for key in kwargs.keys()])), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
@[for field in spec.fields]@
@[if field.default_value]@
        self.@(field.name) = kwargs.get(
            '@(field.name)', @(spec.base_type.type).@(field.name.upper())__DEFAULT)
@[else]@
        self.@(field.name) = kwargs.get('@(field.name)')
@[end if]@
@[end for]@
@[end if]@
@[for field in spec.fields]@

    @@property
    def @(field.name)(self):
        """Message field '@(field.name)'"""
        return self._@(field.name)

    @@@(field.name).setter
    def @(field.name)(self, value):
@[if not field.type.is_primitive_type()]@
        from @(field.type.pkg_name).msg import @(field.type.type)
@[end if]@

@[if field.type.is_array]@
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
@[elif field.type.type == 'byte']@
        from collections import ByteString
@[elif field.type.type in ['char', 'string']]@
        from collections import UserString
@[end if]@

        assert isinstance(value, type(None)) or \
@[if field.type.is_array]@
            ((isinstance(value, Sequence) or isinstance(value, Set) \
            or isinstance(value, UserList)) \
            and not isinstance(value, str) and not isinstance(value, UserString) \
@[if field.type.array_size]@
@[if field.type.is_upper_bound]@
            and len(value) <= @(field.type.array_size) \
@[else]@
            and len(value) == @(field.type.array_size) \
@[end if]@
            and all([isinstance(v, @(get_python_type(field.type))) for v in value]))
@[else]@
            )
@[end if]@
@[elif field.type.string_upper_bound]@
            ((isinstance(value, str) or isinstance(value, UserString)) \
            and len(value) <= @(field.type.string_upper_bound))
@[elif not field.type.is_primitive_type()]@
            isinstance(value, @(field.type.type))
@[elif field.type.type == 'byte']@
            ((isinstance(value, bytes) or isinstance(value, ByteString)) \
                and len(value) == 1)
@[elif field.type.type == 'char']@
            ((isinstance(value, str) or isinstance(value, UserString)) \
            and len(value) == 1)
@[elif field.type.type in [
        'bool',
        'float32', 'float64',
        'int8', 'uint8',
        'int16', 'uint16',
        'int32', 'uint32',
        'int64', 'uint64',
        'string',
    ]]@
            isinstance(value, @(get_python_type(field.type)))
@[else]@
            False
@[end if]@
        self._@(field.name) = value
@[end for]@
