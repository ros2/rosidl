#include <Python.h>

#include <@(spec.base_type.pkg_name)/@(subfolder)/@(module_name)__type_support.h>
#include <rosidl_generator_c/message_type_support.h>

static PyMethodDef @(spec.base_type.pkg_name)_@(module_name)__methods[] = {
  {NULL, NULL, 0, NULL}  /* sentinel */
};

static struct PyModuleDef @(spec.base_type.pkg_name)_@(module_name)__module = {
   PyModuleDef_HEAD_INIT,
   "_@(module_name)_support",
   "_@(module_name)_doc",
   -1,  /* -1 means that the module keeps state in global variables */
   @(spec.base_type.pkg_name)_@(module_name)__methods,
   NULL,
   NULL,
   NULL,
   NULL,
};

/* TODO(esteve): implement conversion function */
void * @(spec.base_type.pkg_name)_@(module_name)__convert_from_py(PyObject *_pymsg);

/* TODO(esteve): implement conversion function */
PyObject * @(spec.base_type.pkg_name)_@(module_name)__convert_to_py(void * raw_ros_message);

PyMODINIT_FUNC
PyInit__@(module_name)_s__@(typesupport_impl)(void)
{
  PyObject *m = NULL;
  m = PyModule_Create(&@(spec.base_type.pkg_name)_@(module_name)__module);
  if (m != NULL) {
    PyObject *pyconvert_from_py = NULL;
    pyconvert_from_py = PyCapsule_New((void *)&@(spec.base_type.pkg_name)_@(module_name)__convert_from_py, NULL, NULL);
    if (pyconvert_from_py != NULL) {
      if (PyModule_AddObject(m, "convert_from_py", pyconvert_from_py)) {
        Py_XDECREF(pyconvert_from_py);
        pyconvert_from_py = NULL;
        Py_XDECREF(m);
        m = NULL;
      }

      PyObject *pyconvert_to_py = NULL;
      pyconvert_to_py = PyCapsule_New((void *)&@(spec.base_type.pkg_name)_@(module_name)__convert_to_py, NULL, NULL);
      if (pyconvert_to_py != NULL) {
        if (PyModule_AddObject(m, "convert_to_py", pyconvert_to_py)) {
          Py_XDECREF(pyconvert_from_py);
          pyconvert_from_py = NULL;
          Py_XDECREF(pyconvert_to_py);
          pyconvert_to_py = NULL;
          Py_XDECREF(m);
          m = NULL;
        }
        PyObject *pytype_support = NULL;
        pytype_support = PyCapsule_New(
          (void *)ROSIDL_GET_MSG_TYPE_SUPPORT(@(spec.base_type.pkg_name), @(spec.msg_name)),
          NULL, NULL);
        if (pytype_support == NULL) {
          Py_XDECREF(pyconvert_from_py);
          pyconvert_from_py = NULL;
          Py_XDECREF(pyconvert_to_py);
          pyconvert_to_py = NULL;
          Py_XDECREF(m);
          m = NULL;
        } else {
          if (PyModule_AddObject(m, "type_support", pytype_support)) {
            Py_XDECREF(pytype_support);
            pytype_support = NULL;
            Py_XDECREF(pyconvert_from_py);
            pyconvert_from_py = NULL;
            Py_XDECREF(pyconvert_to_py);
            pyconvert_to_py = NULL;
            Py_XDECREF(m);
            m = NULL;
          }
        }
      }
    } else {
      Py_XDECREF(m);
      m = NULL;
    }
  }
  return m;
}
